set encoding=utf-8
let mapleader = ","

call plug#begin('~/.vim/plugged')

    " Plug 'alfredodeza/pytest.vim')
    Plug 'altercation/vim-colors-solarized'
    Plug 'ambv/black'
    Plug 'ConradIrwin/vim-bracketed-paste'
    " Plug 'Lokaltog/vim-powerline'
    Plug 'itchyny/lightline.vim'
    "
    Plug 'Yggdroot/indentLine'
    Plug 'airblade/vim-gitgutter'
    Plug 'davidhalter/jedi-vim'
    Plug 'davidszotten/vim-trailing-whitespace'
    Plug 'glench/vim-jinja2-syntax'
    Plug 'isRuslan/vim-es6'
    Plug 'janko-m/vim-test'
    " Plug 'jmcantrell/vim-virtualenv'
    Plug 'junegunn/fzf.vim'
    Plug 'maxbrunsfeld/vim-yankstack'
    Plug 'mileszs/ack.vim'
    Plug 'maximbaz/lightline-ale'
    Plug 'pbogut/fzf-mru.vim'
    Plug 'plasticboy/vim-markdown'
    Plug 'racer-rust/vim-racer'
    Plug 'rust-lang/rust.vim'
    Plug 'scrooloose/nerdcommenter'
    " Plug 'scrooloose/syntastic'
    Plug 'sjl/gundo.vim'
    Plug 'sjl/vitality.vim'
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-rhubarb'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'vim-scripts/CmdlineComplete'
    Plug 'vim-scripts/DeleteTrailingWhitespace'
    Plug 'vim-scripts/ShowTrailingWhitespace'
    " local
    " Plug 'neomake/neomake'
    Plug 'w0rp/ale'
    " Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh'}
    Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}

" Initialize plugin system
call plug#end()


set background=dark
silent! colorscheme solarized
" highlight with underline instead to not loose track of the cursor
:hi! Search ctermbg=NONE ctermfg=NONE cterm=undercurl
set guioptions=egmrt

syntax on
set synmaxcol=200  " default was 3000

" allow per-project vimrc
set exrc
set secure  " make them slightly more secure

" don't hide stuff in e.g. markdown or json docs
set conceallevel=0

" skip the splash screen
set shortmess+=I

" highlight bg at column 80
if v:version >= 703
    set cc=80
end

set hidden
set hlsearch

" bash style tab completion for finding files
set wildmenu
set wildmode=list:longest

" Show partial commands in the last line of the screen
set showcmd

" Modelines have historically been a source of security vulnerabilities.  As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
set nomodeline

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Open new splits right and bottom
set splitbelow
set splitright

" from coming home to vim
nnoremap / /\v
vnoremap / /\v
set gdefault
set incsearch
set showmatch
nnoremap <silent> <leader><space> :noh<cr>:syntax sync fromstart<cr>

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>


" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" tabs expand to 4 spaces
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

set mouse-=a

" share the unnamed register with the system clipboard
" until it stops breaking regular yanking..
" set clipboard=unnamedplus

set ruler
set number

filetype on
filetype plugin on

" key remappings

" toggle autocomplete for pasting
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

"remap § for typos
inoremap § <ESC>
nnoremap § <ESC>

" i prefer full screen help
:cabbrev help tab help

" delete current buffer
nnoremap <leader>d :bd<CR>

" delete all buffers:
nnoremap <leader>w :call CloseAll()<CR>

" keep what was pasted, not what was replaced when pasting in visual mode
vnoremap p pgvy

" allow use of %% to insert current directory in ex mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" in iterm, <D-{> and <D-}> switch iterm tabs
noremap <C-L> :tabnext<cr>
noremap <C-H> :tabprevious<cr>

" system clipboard integration
vnoremap <leader>y "*ygv

" Keep search matches in the middle of the window.
" skip until i can figure out how to get `search hit BOTTOM, continuing at
" TOP` back
"
" nnoremap n nzzzv
" nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_


" backups

if v:version >= 703
    set undofile
    set undodir=~/.vim/tmp/undo//     " undo files
end
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set noswapfile                    " It's 2012, Vim.

" auto-reload changed files
set autoread

" autoread doesn't work when switching terminal windows. fix using vitality.vim
au FocusGained,BufEnter * :silent! !


" allow block selecting beyond eol
set virtualedit=block


" plugin settings

" scratch plugin
nnoremap <leader>s :Scratch <cr>

" yankstack plugin
nmap <c-p> <Plug>yankstack_substitute_older_paste
nmap <c-n> <Plug>yankstack_substitute_newer_paste

" space around/after comments
let NERDSpaceDelims=1

:set wildignore+=*.pyc,htmlcov/**,_build/**,*.sw*,_build/**,site-packages/**,__pycache__,


" fzf
set rtp+=/usr/local/opt/fzf

nnoremap <leader>t :Files<CR>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>m :FZFMru<cr>

" don't highlight background for italics in html files
:highlight htmlItalic term=NONE cterm=NONE gui=NONE


" syntastic
let g:syntastic_enable_signs=0
let g:syntastic_check_on_open=1
let g:syntastic_always_populate_loc_list=1
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_javascript_checkers = ['eslint']

" jedi
" let g:jedi#completions_enabled = 0
let g:jedi#goto_command = 'gD'
autocmd FileType python setlocal completeopt-=preview
let g:jedi#show_call_signatures = "0"
" let g:jedi#show_call_signatures = ""

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" delete trailing whitespace
let g:DeleteTrailingWhitespace_Action = 'delete'

" sudo-write (too easy to hit by accident, but kept here to be used as a
" reference
" command W w !sudo tee % > /dev/null


" IndentLine
let g:indentLine_char = "❘"
let g:indentLine_color_term = 239

" Git gutter
" (same background as number column)
highlight clear SignColumn

" always show tab bar
set showtabline=2

" show first line of current block for 1/2 second
nnoremap <leader>f mf [{0"fy$`f:echo @f<CR>

" autoclose fugutive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete

" disable automatic folding (for markdown)
autocmd Filetype mkd setlocal nofoldenable

autocmd BufRead,BufNewFile CHANGES set syntax=markdown

" make tilde an operator (to allow e.g. ~w to change a whole word)
:set tildeop

" select last paste
nnoremap gp `[v`]
" the above conflicts with yankring
nnoremap vap `[v`]

" Don't clobber the unnamed register when pasting over text in visual mode.
vnoremap p pgvy

set listchars=tab:▸\ ,eol:¬
" Toggle [i]nvisible characters
nnoremap <leader>i :set list!<cr>
" show eol and tab chars by default
set list

" iterm2 cursor shape
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" for powerline
set laststatus=2
set fillchars+=stl:\ ,stlnc:\
let g:Powerline_mode_n = ' N '


" make it easier to make it easier to edit text.
if has("gui_macvim")
    :nnoremap <leader>ev :tabnew $MYVIMRC<cr>
else
    :nnoremap <leader>ev :e $MYVIMRC<cr>
endif
:nnoremap <leader>sv :source $MYVIMRC<cr>

let g:command_t_traverse_to_scm_root = 1


if executable("rg")
    let g:ackprg = 'rg --vimgrep --no-heading --smart-case'
else
    let g:ackprg = 'ag --vimgrep --smart-case'
endif

" File type specific settings


" python

let s:preferred_python_binary = glob("$HOME/environments/vim/bin/python")
if !empty(s:preferred_python_binary)
    let g:python_host_prog=s:preferred_python_binary
endif

function! g:FindSitePackages()
    let l:py_cmd = 'import distutils; print (distutils.sysconfig.get_python_lib())'
    let l:virtualenv = system('python -c "' . l:py_cmd . '"')
    return substitute(l:virtualenv, '\n$', '', '') . '/'
endfunction

cnoremap <expr> ^^ g:FindSitePackages()

augroup ft_python
    au!
    let s:debug_statement = system('python -c "import sys; print(\"breakpoint()\" if sys.version_info >= (3, 7) else \"import pdb; pdb.set_trace()\")"')[:-2]

    exec "au FileType python nnoremap <leader>p O" . s:debug_statement . "<ESC>"
    exec "au FileType python nnoremap <leader>P o" . s:debug_statement . "<ESC>"
augroup END

" Reload the colorscheme whenever we write the file.
augroup color_molokai_dev
    au!
    au BufWritePost molokai.vim color molokai
augroup END

if executable(glob("$HOME/environments/black/bin/black"))
    let g:black_virtualenv = glob("$HOME/environments/black/")
endif


" Mini-plugins ------------------------------------------------------------ {{{

" Synstack {{{

" Show the stack of syntax hilighting classes affecting whatever is under the
" cursor.
function! SynStack()
  echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'), " > ")
endfunc

" }}}


" CloseAll {{{

" Close all saved buffers, open all unsaved in separate tabs
function! CloseAll()
    let last_buffer = bufnr('$')

    " close all saved buffers
    let n = 1
    while n <= last_buffer
        if buflisted(n) && !getbufvar(n, '&modified')
            exe 'bdelete' . ' ' . n
        endif
        let n = n+1
    endwhile

    " close all tabs and re-open (to make sure each is in one tab only)
    tabonly
    tab ball
endfunc

" }}}


" Highlight VCS conflict markers {{{
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" }}}

" CloseEmpty {{{

" Delete all empty buffers

function! BufferIsEmpty()
    if line('$') == 1 && getline(1) == ''
        return 1
    else
        return 0
    endif
endfunction

function! CloseEmpty()
    let last_buffer = bufnr('$')

    " close all saved buffers
    let n = 1
    while n <= last_buffer
        if buflisted(n) && !getbufvar(n, '&modified')
            exe 'bdelete' . ' ' . n
        endif
        let n = n+1
    endwhile

    " close all tabs and re-open (to make sure each is in one tab only)
    tabonly
    tab ball
endfunc

" }}}


" Open file from e.g. stacktrace line marker {{{


function! OpenFromClipboard()
    let marker = @*
    let marker_list = split(marker, ":")
    let filename = marker_list[0]
    let lineno = marker_list[1]
    exe 'e ' . filename
    exe 'normal! ' . lineno . 'G'
endfunc

" }}}


" Format buffer with json data {{{

function! FormatJson()
    exe '%!python3 -mjson.tool'
endfunc

" }}}


" Format buffer with html {{{
"
function! FormatHtml()
    exe '!tidy -mi -xml --indent-spaces 4 -wrap 0 %'
endfunc

" }}}


" isort python buffer {{{

function! Isort()
    exe '%!isort -tc %'
endfunc

" copy filename/path to clipboard {{{

function! CopyFilename()
    let @*=expand("%")
endfunc

" }}}


" }}}


if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif
